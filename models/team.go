// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Team Team defines the structure for an API product
//
// swagger:model Team
type Team struct {

	// Id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// leader
	Leader *Member `json:"leader,omitempty"`
}

// Validate validates this team
func (m *Team) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLeader(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Team) validateLeader(formats strfmt.Registry) error {
	if swag.IsZero(m.Leader) { // not required
		return nil
	}

	if m.Leader != nil {
		if err := m.Leader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("leader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("leader")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this team based on the context it is used
func (m *Team) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLeader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Team) contextValidateLeader(ctx context.Context, formats strfmt.Registry) error {

	if m.Leader != nil {
		if err := m.Leader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("leader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("leader")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Team) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Team) UnmarshalBinary(b []byte) error {
	var res Team
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
